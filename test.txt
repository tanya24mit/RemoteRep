1. со  средой разработки приложений Visual C++. Создать консольное приложение “Hello, Word!”. Выполнить его.
2. Написать, ввести, построить и выполнить три программы копирования файлов cpC, cpW, cpCF с указанной строкой запуска: 
cpC: копирование файлов с использованием стандартной библиотеки С, которая поддерживает объекты потокового ввода-вывода типа FILE, подобные объектам Win32 типа HANDLE:
// cрC файл1 файл2: копирует файл1 в файл2 - программа 1.1
cpW: Копирование файлов с использованием функций Win32 CreateFile, ReadFile, WriteFile:
// cрW файл1 файл2: копирует файл1 в файл2 - программа 1.2
cpCF: Копирование файлов с использованием функции-полуфабриката CopyFile:
// cpCF файл1 файл2: копирует файл1 в файл2 - программа 1.3
3. Выяснить, как поведет себя программа cpC, если входной файл открыть в  двоичном режиме, а выходной - в текстовом, и наоборот. Каков будет результат в MS DOS?
4. Измерить быстродействие программ  копирования на файлах размером 10К, 100К, 1М, 10М, 100М, возможно, с применением функции DWORD GetTickCount(VOID) (заголовочный файл <windows.h.>). Результат оформить в виде таблицы.

3. Содержание отчета

1. Титульный лист.
2. Задание.
3. Описание процесса  создания  консольных приложений в Microsoft Visual C++.
4. Тексты программ.
5. Результаты выполнения п. 3 задания.
6. Таблица измерения быстродействия программ..


Работа 2 (н. 4)
СТАНДАРТНЫЕ УСТРОЙСТВА И КОНСОЛЬНЫЙ ВВОД-ВЫВОД.
1. Основные сведения

Основными функциями для работы с консолью являются установка режима консоли, чтение и вывод на консоль. Вначале необходимо получить дескрипторы стандартных устройств:
  HANDLE GetStdHandle (DWORD nStdHandle); 
Возвращаемое значение: допустимый дескриптор, если успешно; иначе INVALID_HANDLE_VALUE. 
Параметр nStdHandle может иметь значения: STD_INPUT_HANDLE, STD_OUTPUT_HANDLE, STD_ERROR_HANDLE.
Для консольного ввода-вывода зарезервированы имена файлов: CONIN$ и CONOUT$.
Для консольного ввода-вывода можно использовать ReadFile и WriteFile, но лучше - ReadConsole и WriteConsole. Они обрабатывают универсальные символы и учитывают режим консоли.
  BOOL SetConsoleMode (
    HANDLE hConsole,
    DWORD fdevMode);
Возвращаемое значение: TRUE при успехе
Параметры:
hConsole - обработчик ввода или экрана; должен иметь атрибут GENERIC_WRITE.
fdevMode определяет режим обработки символов. При создании буфера установлены все флаги, кроме ENABLE_WINDOW_INPUT.
 - ENABLE_LINE_INPUT - чтение завершается по символу возврата  каретки.
- ENABLE_ECHO_INPUT - читаемые символы дублируются на экpане7
- ENABLE_PROCESSED_INPUT - отрабатываются 
1. со  средой разработки приложений Visual C++. Создать консольное приложение “Hello, Word!”. Выполнить его.
2. Написать, ввести, построить и выполнить три программы копирования файлов cpC, cpW, cpCF с указанной строкой запуска: 
cpC: копирование файлов с использованием стандартной библиотеки С, которая поддерживает объекты потокового ввода-вывода типа FILE, подобные объектам Win32 типа HANDLE:
// cрC файл1 файл2: копирует файл1 в файл2 - программа 1.1
cpW: Копирование файлов с использованием функций Win32 CreateFile, ReadFile, WriteFile:
// cрW файл1 файл2: копирует файл1 в файл2 - программа 1.2
cpCF: Копирование файлов с использованием функции-полуфабриката CopyFile:
// cpCF файл1 файл2: копирует файл1 в файл2 - программа 1.3
3. Выяснить, как поведет себя программа cpC, если входной файл открыть в  двоичном режиме, а выходной - в текстовом, и наоборот. Каков будет результат в MS DOS?
4. Измерить быстродействие программ  копирования на файлах размером 10К, 100К, 1М, 10М, 100М, возможно, с применением функции DWORD GetTickCount(VOID) (заголовочный файл <windows.h.>). Результат оформить в виде таблицы.

3. Содержание отчета

1. Титульный лист.
2. Задание.
3. Описание процесса  создания  консольных приложений в Microsoft Visual C++.
4. Тексты программ.
5. Результаты выполнения п. 3 задания.
6. Таблица измерения быстродействия программ..


Работа 2 (н. 4)
СТАНДАРТНЫЕ УСТРОЙСТВА И КОНСОЛЬНЫЙ ВВОД-ВЫВОД.
1. Основные сведения

Основными функциями для работы с консолью являются установка режима консоли, чтение и вывод на консоль. Вначале необходимо получить дескрипторы стандартных устройств:
  HANDLE GetStdHandle (DWORD nStdHandle); 
Возвращаемое значение: допустимый дескриптор, если успешно; иначе INVALID_HANDLE_VALUE. 
Параметр nStdHandle может иметь значения: STD_INPUT_HANDLE, STD_OUTPUT_HANDLE, STD_ERROR_HANDLE.
Для консольного ввода-вывода зарезервированы имена файлов: CONIN$ и CONOUT$.
Для консольного ввода-вывода можно использовать ReadFile и WriteFile, но лучше - ReadConsole и WriteConsole. Они обрабатывают универсальные символы и учитывают режим консоли.
  BOOL SetConsoleMode (
    HANDLE hConsole,
    DWORD fdevMode);
Возвращаемое значение: TRUE при успехе
Параметры:
hConsole - обработчик ввода или экрана; должен иметь атрибут GENERIC_WRITE.
fdevMode определяет режим обработки символов. При создании буфера установлены все флаги, кроме ENABLE_WINDOW_INPUT.
 - ENABLE_LINE_INPUT - чтение завершается по символу возврата  каретки.
- ENABLE_ECHO_INPUT - читаемые символы дублируются на экpане7
- ENABLE_PROCESSED_INPUT - отрабатываются 
1. со  средой разработки приложений Visual C++. Создать консольное приложение “Hello, Word!”. Выполнить его.
2. Написать, ввести, построить и выполнить три программы копирования файлов cpC, cpW, cpCF с указанной строкой запуска: 
cpC: копирование файлов с использованием стандартной библиотеки С, которая поддерживает объекты потокового ввода-вывода типа FILE, подобные объектам Win32 типа HANDLE:
// cрC файл1 файл2: копирует файл1 в файл2 - программа 1.1
cpW: Копирование файлов с использованием функций Win32 CreateFile, ReadFile, WriteFile:
// cрW файл1 файл2: копирует файл1 в файл2 - программа 1.2
cpCF: Копирование файлов с использованием функции-полуфабриката CopyFile:
// cpCF файл1 файл2: копирует файл1 в файл2 - программа 1.3
3. Выяснить, как поведет себя программа cpC, если входной файл открыть в  двоичном режиме, а выходной - в текстовом, и наоборот. Каков будет результат в MS DOS?
4. Измерить быстродействие программ  копирования на файлах размером 10К, 100К, 1М, 10М, 100М, возможно, с применением функции DWORD GetTickCount(VOID) (заголовочный файл <windows.h.>). Результат оформить в виде таблицы.

3. Содержание отчета

1. Титульный лист.
2. Задание.
3. Описание процесса  создания  консольных приложений в Microsoft Visual C++.
4. Тексты программ.
5. Результаты выполнения п. 3 задания.
6. Таблица измерения быстродействия программ..


Работа 2 (н. 4)
СТАНДАРТНЫЕ УСТРОЙСТВА И КОНСОЛЬНЫЙ ВВОД-ВЫВОД.
1. Основные сведения

Основными функциями для работы с консолью являются установка режима консоли, чтение и вывод на консоль. Вначале необходимо получить дескрипторы стандартных устройств:
  HANDLE GetStdHandle (DWORD nStdHandle); 
Возвращаемое значение: допустимый дескриптор, если успешно; иначе INVALID_HANDLE_VALUE. 
Параметр nStdHandle может иметь значения: STD_INPUT_HANDLE, STD_OUTPUT_HANDLE, STD_ERROR_HANDLE.
Для консольного ввода-вывода зарезервированы имена файлов: CONIN$ и CONOUT$.
Для консольного ввода-вывода можно использовать ReadFile и WriteFile, но лучше - ReadConsole и WriteConsole. Они обрабатывают универсальные символы и учитывают режим консоли.
  BOOL SetConsoleMode (
    HANDLE hConsole,
    DWORD fdevMode);
Возвращаемое значение: TRUE при успехе
Параметры:
hConsole - обработчик ввода или экрана; должен иметь атрибут GENERIC_WRITE.
fdevMode определяет режим обработки символов. При создании буфера установлены все флаги, кроме ENABLE_WINDOW_INPUT.
 - ENABLE_LINE_INPUT - чтение завершается по символу возврата  каретки.
- ENABLE_ECHO_INPUT - читаемые символы дублируются на экpане7
- ENABLE_PROCESSED_INPUT - отрабатываются 
1. со  средой разработки приложений Visual C++. Создать консольное приложение “Hello, Word!”. Выполнить его.
2. Написать, ввести, построить и выполнить три программы копирования файлов cpC, cpW, cpCF с указанной строкой запуска: 
cpC: копирование файлов с использованием стандартной библиотеки С, которая поддерживает объекты потокового ввода-вывода типа FILE, подобные объектам Win32 типа HANDLE:
// cрC файл1 файл2: копирует файл1 в файл2 - программа 1.1
cpW: Копирование файлов с использованием функций Win32 CreateFile, ReadFile, WriteFile:
// cрW файл1 файл2: копирует файл1 в файл2 - программа 1.2
cpCF: Копирование файлов с использованием функции-полуфабриката CopyFile:
// cpCF файл1 файл2: копирует файл1 в файл2 - программа 1.3
3. Выяснить, как поведет себя программа cpC, если входной файл открыть в  двоичном режиме, а выходной - в текстовом, и наоборот. Каков будет результат в MS DOS?
4. Измерить быстродействие программ  копирования на файлах размером 10К, 100К, 1М, 10М, 100М, возможно, с применением функции DWORD GetTickCount(VOID) (заголовочный файл <windows.h.>). Результат оформить в виде таблицы.

3. Содержание отчета

1. Титульный лист.
2. Задание.
3. Описание процесса  создания  консольных приложений в Microsoft Visual C++.
4. Тексты программ.
5. Результаты выполнения п. 3 задания.
6. Таблица измерения быстродействия программ..


Работа 2 (н. 4)
СТАНДАРТНЫЕ УСТРОЙСТВА И КОНСОЛЬНЫЙ ВВОД-ВЫВОД.
1. Основные сведения

Основными функциями для работы с консолью являются установка режима консоли, чтение и вывод на консоль. Вначале необходимо получить дескрипторы стандартных устройств:
  HANDLE GetStdHandle (DWORD nStdHandle); 
Возвращаемое значение: допустимый дескриптор, если успешно; иначе INVALID_HANDLE_VALUE. 
Параметр nStdHandle может иметь значения: STD_INPUT_HANDLE, STD_OUTPUT_HANDLE, STD_ERROR_HANDLE.
Для консольного ввода-вывода зарезервированы имена файлов: CONIN$ и CONOUT$.
Для консольного ввода-вывода можно использовать ReadFile и WriteFile, но лучше - ReadConsole и WriteConsole. Они обрабатывают универсальные символы и учитывают режим консоли.
  BOOL SetConsoleMode (
    HANDLE hConsole,
    DWORD fdevMode);
Возвращаемое значение: TRUE при успехе
Параметры:
hConsole - обработчик ввода или экрана; должен иметь атрибут GENERIC_WRITE.
fdevMode определяет режим обработки символов. При создании буфера установлены все флаги, кроме ENABLE_WINDOW_INPUT.
 - ENABLE_LINE_INPUT - чтение завершается по символу возврата  каретки.
- ENABLE_ECHO_INPUT - читаемые символы дублируются на экpане7
- ENABLE_PROCESSED_INPUT - отрабатываются 
1. со  средой разработки приложений Visual C++. Создать консольное приложение “Hello, Word!”. Выполнить его.
2. Написать, ввести, построить и выполнить три программы копирования файлов cpC, cpW, cpCF с указанной строкой запуска: 
cpC: копирование файлов с использованием стандартной библиотеки С, которая поддерживает объекты потокового ввода-вывода типа FILE, подобные объектам Win32 типа HANDLE:
// cрC файл1 файл2: копирует файл1 в файл2 - программа 1.1
cpW: Копирование файлов с использованием функций Win32 CreateFile, ReadFile, WriteFile:
// cрW файл1 файл2: копирует файл1 в файл2 - программа 1.2
cpCF: Копирование файлов с использованием функции-полуфабриката CopyFile:
// cpCF файл1 файл2: копирует файл1 в файл2 - программа 1.3
3. Выяснить, как поведет себя программа cpC, если входной файл открыть в  двоичном режиме, а выходной - в текстовом, и наоборот. Каков будет результат в MS DOS?
4. Измерить быстродействие программ  копирования на файлах размером 10К, 100К, 1М, 10М, 100М, возможно, с применением функции DWORD GetTickCount(VOID) (заголовочный файл <windows.h.>). Результат оформить в виде таблицы.

3. Содержание отчета

1. Титульный лист.
2. Задание.
3. Описание процесса  создания  консольных приложений в Microsoft Visual C++.
4. Тексты программ.
5. Результаты выполнения п. 3 задания.
6. Таблица измерения быстродействия программ..


Работа 2 (н. 4)
СТАНДАРТНЫЕ УСТРОЙСТВА И КОНСОЛЬНЫЙ ВВОД-ВЫВОД.
1. Основные сведения

Основными функциями для работы с консолью являются установка режима консоли, чтение и вывод на консоль. Вначале необходимо получить дескрипторы стандартных устройств:
  HANDLE GetStdHandle (DWORD nStdHandle); 
Возвращаемое значение: допустимый дескриптор, если успешно; иначе INVALID_HANDLE_VALUE. 
Параметр nStdHandle может иметь значения: STD_INPUT_HANDLE, STD_OUTPUT_HANDLE, STD_ERROR_HANDLE.
Для консольного ввода-вывода зарезервированы имена файлов: CONIN$ и CONOUT$.
Для консольного ввода-вывода можно использовать ReadFile и WriteFile, но лучше - ReadConsole и WriteConsole. Они обрабатывают универсальные символы и учитывают режим консоли.
  BOOL SetConsoleMode (
    HANDLE hConsole,
    DWORD fdevMode);
Возвращаемое значение: TRUE при успехе
Параметры:
hConsole - обработчик ввода или экрана; должен иметь атрибут GENERIC_WRITE.
fdevMode определяет режим обработки символов. При создании буфера установлены все флаги, кроме ENABLE_WINDOW_INPUT.
 - ENABLE_LINE_INPUT - чтение завершается по символу возврата  каретки.
- ENABLE_ECHO_INPUT - читаемые символы дублируются на экpане7
- ENABLE_PROCESSED_INPUT - отрабатываются 
1. со  средой разработки приложений Visual C++. Создать консольное приложение “Hello, Word!”. Выполнить его.
2. Написать, ввести, построить и выполнить три программы копирования файлов cpC, cpW, cpCF с указанной строкой запуска: 
cpC: копирование файлов с использованием стандартной библиотеки С, которая поддерживает объекты потокового ввода-вывода типа FILE, подобные объектам Win32 типа HANDLE:
// cрC файл1 файл2: копирует файл1 в файл2 - программа 1.1
cpW: Копирование файлов с использованием функций Win32 CreateFile, ReadFile, WriteFile:
// cрW файл1 файл2: копирует файл1 в файл2 - программа 1.2
cpCF: Копирование файлов с использованием функции-полуфабриката CopyFile:
// cpCF файл1 файл2: копирует файл1 в файл2 - программа 1.3
3. Выяснить, как поведет себя программа cpC, если входной файл открыть в  двоичном режиме, а выходной - в текстовом, и наоборот. Каков будет результат в MS DOS?
4. Измерить быстродействие программ  копирования на файлах размером 10К, 100К, 1М, 10М, 100М, возможно, с применением функции DWORD GetTickCount(VOID) (заголовочный файл <windows.h.>). Результат оформить в виде таблицы.

3. Содержание отчета

1. Титульный лист.
2. Задание.
3. Описание процесса  создания  консольных приложений в Microsoft Visual C++.
4. Тексты программ.
5. Результаты выполнения п. 3 задания.
6. Таблица измерения быстродействия программ..


Работа 2 (н. 4)
СТАНДАРТНЫЕ УСТРОЙСТВА И КОНСОЛЬНЫЙ ВВОД-ВЫВОД.
1. Основные сведения

Основными функциями для работы с консолью являются установка режима консоли, чтение и вывод на консоль. Вначале необходимо получить дескрипторы стандартных устройств:
  HANDLE GetStdHandle (DWORD nStdHandle); 
Возвращаемое значение: допустимый дескриптор, если успешно; иначе INVALID_HANDLE_VALUE. 
Параметр nStdHandle может иметь значения: STD_INPUT_HANDLE, STD_OUTPUT_HANDLE, STD_ERROR_HANDLE.
Для консольного ввода-вывода зарезервированы имена файлов: CONIN$ и CONOUT$.
Для консольного ввода-вывода можно использовать ReadFile и WriteFile, но лучше - ReadConsole и WriteConsole. Они обрабатывают универсальные символы и учитывают режим консоли.
  BOOL SetConsoleMode (
    HANDLE hConsole,
    DWORD fdevMode);
Возвращаемое значение: TRUE при успехе
Параметры:
hConsole - обработчик ввода или экрана; должен иметь атрибут GENERIC_WRITE.
fdevMode определяет режим обработки символов. При создании буфера установлены все флаги, кроме ENABLE_WINDOW_INPUT.
 - ENABLE_LINE_INPUT - чтение завершается по символу возврата  каретки.
- ENABLE_ECHO_INPUT - читаемые символы дублируются на экpане7
- ENABLE_PROCESSED_INPUT - отрабатываются 

1. со  средой разработки приложений Visual C++. Создать консольное приложение “Hello, Word!”. Выполнить его.
2. Написать, ввести, построить и выполнить три программы копирования файлов cpC, cpW, cpCF с указанной строкой запуска: 
cpC: копирование файлов с использованием стандартной библиотеки С, которая поддерживает объекты потокового ввода-вывода типа FILE, подобные объектам Win32 типа HANDLE:
// cрC файл1 файл2: копирует файл1 в файл2 - программа 1.1
cpW: Копирование файлов с использованием функций Win32 CreateFile, ReadFile, WriteFile:
// cрW файл1 файл2: копирует файл1 в файл2 - программа 1.2
cpCF: Копирование файлов с использованием функции-полуфабриката CopyFile:
// cpCF файл1 файл2: копирует файл1 в файл2 - программа 1.3
3. Выяснить, как поведет себя программа cpC, если входной файл открыть в  двоичном режиме, а выходной - в текстовом, и наоборот. Каков будет результат в MS DOS?
4. Измерить быстродействие программ  копирования на файлах размером 10К, 100К, 1М, 10М, 100М, возможно, с применением функции DWORD GetTickCount(VOID) (заголовочный файл <windows.h.>). Результат оформить в виде таблицы.

3. Содержание отчета

1. Титульный лист.
2. Задание.
3. Описание процесса  создания  консольных приложений в Microsoft Visual C++.
4. Тексты программ.
5. Результаты выполнения п. 3 задания.
6. Таблица измерения быстродействия программ..


Работа 2 (н. 4)
СТАНДАРТНЫЕ УСТРОЙСТВА И КОНСОЛЬНЫЙ ВВОД-ВЫВОД.
1. Основные сведения

Основными функциями для работы с консолью являются установка режима консоли, чтение и вывод на консоль. Вначале необходимо получить дескрипторы стандартных устройств:
  HANDLE GetStdHandle (DWORD nStdHandle); 
Возвращаемое значение: допустимый дескриптор, если успешно; иначе INVALID_HANDLE_VALUE. 
Параметр nStdHandle может иметь значения: STD_INPUT_HANDLE, STD_OUTPUT_HANDLE, STD_ERROR_HANDLE.
Для консольного ввода-вывода зарезервированы имена файлов: CONIN$ и CONOUT$.
Для консольного ввода-вывода можно использовать ReadFile и WriteFile, но лучше - ReadConsole и WriteConsole. Они обрабатывают универсальные символы и учитывают режим консоли.
  BOOL SetConsoleMode (
    HANDLE hConsole,
    DWORD fdevMode);
Возвращаемое значение: TRUE при успехе
Параметры:
hConsole - обработчик ввода или экрана; должен иметь атрибут GENERIC_WRITE.
fdevMode определяет режим обработки символов. При создании буфера установлены все флаги, кроме ENABLE_WINDOW_INPUT.
 - ENABLE_LINE_INPUT - чтение завершается по символу возврата  каретки.
- ENABLE_ECHO_INPUT - читаемые символы дублируются на экpане7
- ENABLE_PROCESSED_INPUT - отрабатываются 
1. со  средой разработки приложений Visual C++. Создать консольное приложение “Hello, Word!”. Выполнить его.
2. Написать, ввести, построить и выполнить три программы копирования файлов cpC, cpW, cpCF с указанной строкой запуска: 
cpC: копирование файлов с использованием стандартной библиотеки С, которая поддерживает объекты потокового ввода-вывода типа FILE, подобные объектам Win32 типа HANDLE:
// cрC файл1 файл2: копирует файл1 в файл2 - программа 1.1
cpW: Копирование файлов с использованием функций Win32 CreateFile, ReadFile, WriteFile:
// cрW файл1 файл2: копирует файл1 в файл2 - программа 1.2
cpCF: Копирование файлов с использованием функции-полуфабриката CopyFile:
// cpCF файл1 файл2: копирует файл1 в файл2 - программа 1.3
3. Выяснить, как поведет себя программа cpC, если входной файл открыть в  двоичном режиме, а выходной - в текстовом, и наоборот. Каков будет результат в MS DOS?
4. Измерить быстродействие программ  копирования на файлах размером 10К, 100К, 1М, 10М, 100М, возможно, с применением функции DWORD GetTickCount(VOID) (заголовочный файл <windows.h.>). Результат оформить в виде таблицы.

3. Содержание отчета

1. Титульный лист.
2. Задание.
3. Описание процесса  создания  консольных приложений в Microsoft Visual C++.
4. Тексты программ.
5. Результаты выполнения п. 3 задания.
6. Таблица измерения быстродействия программ..


Работа 2 (н. 4)
СТАНДАРТНЫЕ УСТРОЙСТВА И КОНСОЛЬНЫЙ ВВОД-ВЫВОД.
1. Основные сведения

Основными функциями для работы с консолью являются установка режима консоли, чтение и вывод на консоль. Вначале необходимо получить дескрипторы стандартных устройств:
  HANDLE GetStdHandle (DWORD nStdHandle); 
Возвращаемое значение: допустимый дескриптор, если успешно; иначе INVALID_HANDLE_VALUE. 
Параметр nStdHandle может иметь значения: STD_INPUT_HANDLE, STD_OUTPUT_HANDLE, STD_ERROR_HANDLE.
Для консольного ввода-вывода зарезервированы имена файлов: CONIN$ и CONOUT$.
Для консольного ввода-вывода можно использовать ReadFile и WriteFile, но лучше - ReadConsole и WriteConsole. Они обрабатывают универсальные символы и учитывают режим консоли.
  BOOL SetConsoleMode (
    HANDLE hConsole,
    DWORD fdevMode);
Возвращаемое значение: TRUE при успехе
Параметры:
hConsole - обработчик ввода или экрана; должен иметь атрибут GENERIC_WRITE.
fdevMode определяет режим обработки символов. При создании буфера установлены все флаги, кроме ENABLE_WINDOW_INPUT.
 - ENABLE_LINE_INPUT - чтение завершается по символу возврата  каретки.
- ENABLE_ECHO_INPUT - читаемые символы дублируются на экpане7
- ENABLE_PROCESSED_INPUT - отрабатываются 
1. со  средой разработки приложений Visual C++. Создать консольное приложение “Hello, Word!”. Выполнить его.
2. Написать, ввести, построить и выполнить три программы копирования файлов cpC, cpW, cpCF с указанной строкой запуска: 
cpC: копирование файлов с использованием стандартной библиотеки С, которая поддерживает объекты потокового ввода-вывода типа FILE, подобные объектам Win32 типа HANDLE:
// cрC файл1 файл2: копирует файл1 в файл2 - программа 1.1
cpW: Копирование файлов с использованием функций Win32 CreateFile, ReadFile, WriteFile:
// cрW файл1 файл2: копирует файл1 в файл2 - программа 1.2
cpCF: Копирование файлов с использованием функции-полуфабриката CopyFile:
// cpCF файл1 файл2: копирует файл1 в файл2 - программа 1.3
3. Выяснить, как поведет себя программа cpC, если входной файл открыть в  двоичном режиме, а выходной - в текстовом, и наоборот. Каков будет результат в MS DOS?
4. Измерить быстродействие программ  копирования на файлах размером 10К, 100К, 1М, 10М, 100М, возможно, с применением функции DWORD GetTickCount(VOID) (заголовочный файл <windows.h.>). Результат оформить в виде таблицы.

3. Содержание отчета

1. Титульный лист.
2. Задание.
3. Описание процесса  создания  консольных приложений в Microsoft Visual C++.
4. Тексты программ.
5. Результаты выполнения п. 3 задания.
6. Таблица измерения быстродействия программ..


Работа 2 (н. 4)
СТАНДАРТНЫЕ УСТРОЙСТВА И КОНСОЛЬНЫЙ ВВОД-ВЫВОД.
1. Основные сведения

Основными функциями для работы с консолью являются установка режима консоли, чтение и вывод на консоль. Вначале необходимо получить дескрипторы стандартных устройств:
  HANDLE GetStdHandle (DWORD nStdHandle); 
Возвращаемое значение: допустимый дескриптор, если успешно; иначе INVALID_HANDLE_VALUE. 
Параметр nStdHandle может иметь значения: STD_INPUT_HANDLE, STD_OUTPUT_HANDLE, STD_ERROR_HANDLE.
Для консольного ввода-вывода зарезервированы имена файлов: CONIN$ и CONOUT$.
Для консольного ввода-вывода можно использовать ReadFile и WriteFile, но лучше - ReadConsole и WriteConsole. Они обрабатывают универсальные символы и учитывают режим консоли.
  BOOL SetConsoleMode (
    HANDLE hConsole,
    DWORD fdevMode);
Возвращаемое значение: TRUE при успехе
Параметры:
hConsole - обработчик ввода или экрана; должен иметь атрибут GENERIC_WRITE.
fdevMode определяет режим обработки символов. При создании буфера установлены все флаги, кроме ENABLE_WINDOW_INPUT.
 - ENABLE_LINE_INPUT - чтение завершается по символу возврата  каретки.
- ENABLE_ECHO_INPUT - читаемые символы дублируются на экpане7
- ENABLE_PROCESSED_INPUT - отрабатываются 
1. со  средой разработки приложений Visual C++. Создать консольное приложение “Hello, Word!”. Выполнить его.
2. Написать, ввести, построить и выполнить три программы копирования файлов cpC, cpW, cpCF с указанной строкой запуска: 
cpC: копирование файлов с использованием стандартной библиотеки С, которая поддерживает объекты потокового ввода-вывода типа FILE, подобные объектам Win32 типа HANDLE:
// cрC файл1 файл2: копирует файл1 в файл2 - программа 1.1
cpW: Копирование файлов с использованием функций Win32 CreateFile, ReadFile, WriteFile:
// cрW файл1 файл2: копирует файл1 в файл2 - программа 1.2
cpCF: Копирование файлов с использованием функции-полуфабриката CopyFile:
// cpCF файл1 файл2: копирует файл1 в файл2 - программа 1.3
3. Выяснить, как поведет себя программа cpC, если входной файл открыть в  двоичном режиме, а выходной - в текстовом, и наоборот. Каков будет результат в MS DOS?
4. Измерить быстродействие программ  копирования на файлах размером 10К, 100К, 1М, 10М, 100М, возможно, с применением функции DWORD GetTickCount(VOID) (заголовочный файл <windows.h.>). Результат оформить в виде таблицы.

3. Содержание отчета

1. Титульный лист.
2. Задание.
3. Описание процесса  создания  консольных приложений в Microsoft Visual C++.
4. Тексты программ.
5. Результаты выполнения п. 3 задания.
6. Таблица измерения быстродействия программ..


Работа 2 (н. 4)
СТАНДАРТНЫЕ УСТРОЙСТВА И КОНСОЛЬНЫЙ ВВОД-ВЫВОД.
1. Основные сведения

Основными функциями для работы с консолью являются установка режима консоли, чтение и вывод на консоль. Вначале необходимо получить дескрипторы стандартных устройств:
  HANDLE GetStdHandle (DWORD nStdHandle); 
Возвращаемое значение: допустимый дескриптор, если успешно; иначе INVALID_HANDLE_VALUE. 
Параметр nStdHandle может иметь значения: STD_INPUT_HANDLE, STD_OUTPUT_HANDLE, STD_ERROR_HANDLE.
Для консольного ввода-вывода зарезервированы имена файлов: CONIN$ и CONOUT$.
Для консольного ввода-вывода можно использовать ReadFile и WriteFile, но лучше - ReadConsole и WriteConsole. Они обрабатывают универсальные символы и учитывают режим консоли.
  BOOL SetConsoleMode (
    HANDLE hConsole,
    DWORD fdevMode);
Возвращаемое значение: TRUE при успехе
Параметры:
hConsole - обработчик ввода или экрана; должен иметь атрибут GENERIC_WRITE.
fdevMode определяет режим обработки символов. При создании буфера установлены все флаги, кроме ENABLE_WINDOW_INPUT.
 - ENABLE_LINE_INPUT - чтение завершается по символу возврата  каретки.
- ENABLE_ECHO_INPUT - читаемые символы дублируются на экpане7
- ENABLE_PROCESSED_INPUT - отрабатываются 
1. со  средой разработки приложений Visual C++. Создать консольное приложение “Hello, Word!”. Выполнить его.
2. Написать, ввести, построить и выполнить три программы копирования файлов cpC, cpW, cpCF с указанной строкой запуска: 
cpC: копирование файлов с использованием стандартной библиотеки С, которая поддерживает объекты потокового ввода-вывода типа FILE, подобные объектам Win32 типа HANDLE:
// cрC файл1 файл2: копирует файл1 в файл2 - программа 1.1
cpW: Копирование файлов с использованием функций Win32 CreateFile, ReadFile, WriteFile:
// cрW файл1 файл2: копирует файл1 в файл2 - программа 1.2
cpCF: Копирование файлов с использованием функции-полуфабриката CopyFile:
// cpCF файл1 файл2: копирует файл1 в файл2 - программа 1.3
3. Выяснить, как поведет себя программа cpC, если входной файл открыть в  двоичном режиме, а выходной - в текстовом, и наоборот. Каков будет результат в MS DOS?
4. Измерить быстродействие программ  копирования на файлах размером 10К, 100К, 1М, 10М, 100М, возможно, с применением функции DWORD GetTickCount(VOID) (заголовочный файл <windows.h.>). Результат оформить в виде таблицы.

3. Содержание отчета

1. Титульный лист.
2. Задание.
3. Описание процесса  создания  консольных приложений в Microsoft Visual C++.
4. Тексты программ.
5. Результаты выполнения п. 3 задания.
6. Таблица измерения быстродействия программ..


Работа 2 (н. 4)
СТАНДАРТНЫЕ УСТРОЙСТВА И КОНСОЛЬНЫЙ ВВОД-ВЫВОД.
1. Основные сведения

Основными функциями для работы с консолью являются установка режима консоли, чтение и вывод на консоль. Вначале необходимо получить дескрипторы стандартных устройств:
  HANDLE GetStdHandle (DWORD nStdHandle); 
Возвращаемое значение: допустимый дескриптор, если успешно; иначе INVALID_HANDLE_VALUE. 
Параметр nStdHandle может иметь значения: STD_INPUT_HANDLE, STD_OUTPUT_HANDLE, STD_ERROR_HANDLE.
Для консольного ввода-вывода зарезервированы имена файлов: CONIN$ и CONOUT$.
Для консольного ввода-вывода можно использовать ReadFile и WriteFile, но лучше - ReadConsole и WriteConsole. Они обрабатывают универсальные символы и учитывают режим консоли.
  BOOL SetConsoleMode (
    HANDLE hConsole,
    DWORD fdevMode);
Возвращаемое значение: TRUE при успехе
Параметры:
hConsole - обработчик ввода или экрана; должен иметь атрибут GENERIC_WRITE.
fdevMode определяет режим обработки символов. При создании буфера установлены все флаги, кроме ENABLE_WINDOW_INPUT.
 - ENABLE_LINE_INPUT - чтение завершается по символу возврата  каретки.
- ENABLE_ECHO_INPUT - читаемые символы дублируются на экpане7
- ENABLE_PROCESSED_INPUT - отрабатываются 